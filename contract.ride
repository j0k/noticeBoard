{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func note(note:String, author:String) = {
    let currentNNote = match getInteger(this, "currentNNote") {
        case a:Int => a
        case _     => 0
    }

    let currentNextNote = currentNNote + 1
    let currentNextNoteS = toString(currentNextNote)

    let numbData = DataEntry("currentNNote", currentNextNote)
    let noteData = DataEntry("n_" + currentNextNoteS, note)
    let authData = DataEntry("a_" + currentNextNoteS, author)
    let addrData = DataEntry("addr_" + currentNextNoteS + "_" + toBase58String(i.caller.bytes), author)

    let pay = extract(i.payment)

    if (pay.assetId == unit && pay.amount == 500000) then
        WriteSet([numbData, noteData, authData, addrData])
    else if (pay.assetId == base58'4p2Vu1KsAqhNwh2ehWFp7fEwvjv6N14HQF3eC9FeFhM6' && pay.amount == 500) then #SLAVIK-BESSONOV
        WriteSet([numbData, noteData, authData, addrData])
    else throw("No!")
}
